stages:
  - test
  - build
  - deploy

variables:
  VERSION: $CI_COMMIT_TAG

workflow:
  rules:
    # - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "merge_request_event"'
    # - if: '$CI_COMMIT_BRANCH == "feat/ci-environment"'
    #   variables:
    #     ENVIRONMENT: develop
    #     CHART_NAME: beep-api-develop
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-staging$/'
      variables:
        ENVIRONMENT: staging
        CHART_NAME: beep-api-staging
        IMAGE_NAME: 'hugo08/beep-api-staging'
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        ENVIRONMENT: production
        CHART_NAME: beep-api
        IMAGE_NAME: 'milou666/beep-api'
    - when: always

before_script:
  - export VERSION=$(echo $CI_COMMIT_TAG | sed 's/-staging//')

lint:
  tags:
    - beep-runner
  stage: test
  image: node:20.18
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-9 --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm install
    - pnpm typecheck
    - pnpm lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG
      when: always

test:
  stage: test
  tags:
    - beep-runner
  image: node:20.18
  services:
    - name: postgres
      alias: postgres
      variables:
        POSTGRES_DB: backend-test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
    - name: redis
      alias: redis
      variables:
        REDIS_PASSWORD: password
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-9 --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - export $(cat .env.test | xargs)
    - export REDIS_HOST=$REDIS_PORT_6379_TCP_ADDR
    - export DB_HOST=$POSTGRES_PORT_5432_TCP_ADDR
    - export HOST=$HOSTNAME
    - pnpm install
    - pnpm test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG
      when: always

build:
  stage: build
  tags:
    - beep-runner
  rules:
    - if: $CI_COMMIT_TAG
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: ['']
  needs: [lint, test]
  script:
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$USER_DOCKERHUB\",\"password\":\"$PASSWORD_DOCKERHUB\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $IMAGE_NAME:$VERSION
  environment:
    name: $ENVIRONMENT

deploy:
  stage: deploy
  tags:
    - beep-runner
  needs: ['build']
  rules:
    - if: $CI_COMMIT_TAG
  image:
    name: alpine/helm:latest
    entrypoint: ['']
  script:
    - wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O yq && chmod +x ./yq
    - echo $VERSION
    - DOMAIN=$(echo $API_URL_ENDPOINT | awk -F[/:] '{print $4}')
    - 'echo "Extracted DOMAIN: $DOMAIN"'
    - ./yq '. *= load("helm/api/values.'$ENVIRONMENT'.yaml")' helm/api/values.global.yaml > helm/api/values.yaml
    - ./yq -i ".name=\"$CHART_NAME\"" helm/api/Chart.yaml
    - helm package helm/api --version $VERSION --app-version $VERSION
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@$CHART_NAME-$VERSION.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/$ENVIRONMENT/charts"'
  environment:
    name: $ENVIRONMENT
